apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: ${SERVICE_NAME} (MongoDB)
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-admin_password: "{.data['database-admin-password']}"
        template.openshift.io/expose-database_name: "{.data['database-name']}"
        template.openshift.io/expose-password: "{.data['database-password']}"
        template.openshift.io/expose-username: "{.data['database-user']}"
      name: ${DATABASE_SERVICE_NAME}
      namespace: ${NAMESPACE}
    stringData:
      database-admin-password: ${MONGODB_ADMIN_PASSWORD}
      database-name: ${MONGODB_DATABASE}
      database-password: ${MONGODB_PASSWORD}
      database-user: ${MONGODB_USER}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
      name: ${DATABASE_SERVICE_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: mongo
          nodePort: 0
          port: 27017
          protocol: TCP
          targetPort: 27017
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${DATABASE_SERVICE_NAME}
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
            - capabilities: {}
              env:
                - name: MONGODB_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${DATABASE_SERVICE_NAME}
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${DATABASE_SERVICE_NAME}
                - name: MONGODB_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: ${DATABASE_SERVICE_NAME}
                - name: MONGODB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${DATABASE_SERVICE_NAME}
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 27017
                timeoutSeconds: 1
              name: mongodb
              ports:
                - containerPort: 27017
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                      --eval="quit()"
                initialDelaySeconds: 3
                timeoutSeconds: 1
              resources:
                limits:
                  memory: ${MEMORY_LIMIT}
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/mongodb/data
                  name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - emptyDir:
                medium: ""
              name: ${DATABASE_SERVICE_NAME}-data
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - mongodb
            from:
              kind: ImageStreamTag
              name: mongodb:${MONGODB_VERSION}
              namespace: ${MONGO_IS_NAMESPACE}
            lastTriggeredImage: ""
          type: ImageChange
        - type: ConfigChange
    status: {}
parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: MONGO_IS_NAMESPACE
    required: true
    value: openshift
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name (MongoDB service Name)
    name: DATABASE_SERVICE_NAME
    required: true
    value: mongo
  - description: Username for MongoDB user that will be used for accessing the database.
    displayName: MongoDB service Port
    value: "27017"
    name: MONGODB_PORT
    required: true
  - description: Username for MongoDB user that will be used for accessing the database.
    displayName: MongoDB Connection Username
    value: mongo
    name: MONGODB_USER
    required: true
  - description: Password for the MongoDB connection user.
    displayName: MongoDB Connection Password
    value: mongo
    name: MONGODB_PASSWORD
    required: true
  - description: Name of the MongoDB database accessed.
    displayName: MongoDB Database Name
    name: MONGODB_DATABASE
    value: app
    required: true
  - description: Password for the database admin user.
    displayName: MongoDB Admin Password
    value: mongo
    name: MONGODB_ADMIN_PASSWORD
    required: true
  - description: Version of MongoDB image to be used (3.6 or latest).
    displayName: Version of MongoDB Image
    name: MONGODB_VERSION
    required: true
    value: "3.6"